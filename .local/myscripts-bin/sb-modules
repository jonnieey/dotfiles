#!/bin/bash
battery() {
        BATTERY_LEVEL=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null)
        BATTERY2_LEVEL=$(cat /sys/class/power_supply/BAT1/capacity 2>/dev/null)

        if [ -n "$BATTERY_LEVEL" ] && [ -n "$BATTERY2_LEVEL" ]; then
                echo "$BATTERY_LEVEL% $BATTERY2_LEVEL%"
        elif [ -n "$BATTERY_LEVEL" ]; then
                echo "$BATTERY_LEVEL%"
        elif [ -n "$BATTERY2_LEVEL" ]; then
                echo "$BATTERY2_LEVEL%"
        else
                echo "No battery info"
        fi
}
usage() {
        echo "usage: $0 [-b]"
        echo "  -b: show battery level"
        return 1
}

bandwidth() {
    unit="Kb"
    dt=1
    printf_command="printf \"↓%.0f ↑%.0f %s\\n\", rx, wx, unit;"

    function default_interface {
        ip route | awk '/^default via/ {print $5; exit}'
    }

    function check_proc_net_dev {
        if [ ! -f "/proc/net/dev" ]; then
            echo "/proc/net/dev not found"
            exit 1
        fi
    }

    function list_interfaces {
        check_proc_net_dev
        echo "Interfaces in /proc/net/dev:"
        grep -o "^[^:]\\+:" /proc/net/dev | tr -d " :"
    }

    while getopts i:t:u:p:lh opt; do
        case "$opt" in
            i) iface="$OPTARG" ;;
            t) dt="$OPTARG" ;;
            u) unit="$OPTARG" ;;
            p) printf_command="$OPTARG" ;;
            l) list_interfaces && exit 0 ;;
            h|*) printf \
    "Usage: bandwidth3 [-i interface] [-t time] [-u unit] [-p printf_command] [-l] [-h]
    Options:
    -i\tNetwork interface to measure. Default determined using \`ip route\`.
    -t\tTime interval in seconds between measurements. Default: 3
    -u\tUnits to measure bytes in. Default: Mb
    \tAllowed units: Kb, KB, Mb, MB, Gb, GB, Tb, TB
    \tUnits may have optional it/its/yte/ytes on the end, e.g. Mbits, KByte
    -p\tAwk command to be called after a measurement is made. 
    \tDefault: printf \"<span font='FontAwesome'>  </span>%%-5.1f/%%5.1f %%s/s\\\\n\", rx, wx, unit;
    \tExposed variables: rx, wx, tx, unit, iface
    -l\tList available interfaces in /proc/net/dev
    -h\tShow this help text
    " && exit 0;;
        esac
    done

    check_proc_net_dev

    iface="${iface:-$(default_interface)}"
    while [ -z "$iface" ]; do
        echo No default interface
        sleep "$dt"
        iface=$(default_interface)
    done

    case "$unit" in
        Kb|Kbit|Kbits)   bytes_per_unit=$((1024 / 8));;
        KB|KByte|KBytes) bytes_per_unit=$((1024));;
        Mb|Mbit|Mbits)   bytes_per_unit=$((1024 * 1024 / 8));;
        MB|MByte|MBytes) bytes_per_unit=$((1024 * 1024));;
        Gb|Gbit|Gbits)   bytes_per_unit=$((1024 * 1024 * 1024 / 8));;
        GB|GByte|GBytes) bytes_per_unit=$((1024 * 1024 * 1024));;
        Tb|Tbit|Tbits)   bytes_per_unit=$((1024 * 1024 * 1024 * 1024 / 8));;
        TB|TByte|TBytes) bytes_per_unit=$((1024 * 1024 * 1024 * 1024));;
        *) echo Bad unit "$unit" && exit 1;;
    esac

    scalar=$((bytes_per_unit * dt))
    init_line=$(grep "^[ ]*$iface:" /proc/net/dev )
    if [ -z "$init_line" ]; then
        echo Interface not found in /proc/net/dev: "$iface"
        exit 1
    fi

    init_received=$(awk '{print $2}' <<< "$init_line")
    init_sent=$(awk '{print $10}' <<< "$init_line")

    (while true; do cat /proc/net/dev; sleep "$dt"; done) |\
        stdbuf -oL grep "^[ ]*$iface:" |\
        awk -v scalar="$scalar" -v unit="$unit" -v iface="$iface" '
    BEGIN{old_received='"$init_received"';old_sent='"$init_sent"'}
    {
        received=$2
        sent=$10
        rx=(received-old_received)/scalar;
        wx=(sent-old_sent)/scalar;
        tx=rx+wr;
        old_received=received;
        old_sent=sent;
        if(rx >= 0 && wx >= 0){
            '"$printf_command"';
            fflush(stdout);
        }
    }
    '
}
temperature() {
    [ -z "$1" ] && set -- '${c}°C'

    c=
    path=/sys/class/thermal/thermal_zone0/temp
    if [ -f $path ]
    then
        read -r c < $path
    else
        echo "could not get temperature" >&2
        exit 1
    fi

    c="${c%???}"

    eval echo "$1"
}

function disk_usage() {
    : "${FU_SCALE=0}"
    [ -z "$1" ] && set -- '${gb_free}G' '/$'

    df | awk -v pattern="$2" '$0 ~ pattern {print}' | \
        while read -r fs kb_total kb_used kb_free _ mnt
        do
            # Use shell arithmetic to avoid calling 'dc' multiple times
            # b_free=$((kb_free * 1024))
            # b_used=$((kb_used * 1024))
            # b_total=$((kb_total * 1024))

            mb_free=$((kb_free / 1024))
            # mb_used=$((kb_used / 1024))
            # mb_total=$((kb_total / 1024))

            gb_free=$((mb_free / 1024))
            # gb_used=$((mb_used / 1024))
            # gb_total=$((mb_total / 1024))

            echo "${1/\$\{gb_free\}/$gb_free}"
        done
}

function mem_usage() {
    # show free mem as a percentage
    # (free * 100) / $total
    free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2}'
}

function cpu_usage() {
    # show user,sys,iowait metrics
    # %user + %sys + %iowait
    mpstat -u | tail -n 1 | awk '{printf "%.2f%%", $4+$6+$7}'

}


while getopts "bBtdmc" opt; do case ${opt} in b)
                battery
                ;;

            B)
                bandwidth "$@"
                ;;
            d)
                shift
                disk_usage "$@"
                ;;
            t)
                shift
                temperature "$@"
                ;;
            m)
                shift
                mem_usage
                ;;
            c)
                shift
                cpu_usage
                ;;
            *)
                usage
                exit 1
        esac

done

